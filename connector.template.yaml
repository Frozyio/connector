# Some of the values below support remote value syntax. Remote value syntax is
# used when  instead of supplying a literal value in configuration you supply an
# instruction on where to get it from.
#
# Of course for the fields that support remote value syntax you still can use
# good old literal values.
#
# If, however, you want to use remote, then define a value as YAML dictionary.
# That dictionary has one mandatory key - "origin". Other keys might
# (or might not) be required depending on a value of "origin". This value
# currently can only be 'gce_instance_metadata'. Like this:
#
# auto_registration:
#   access_token:
#     origin: gce_instance_metadata
#     attribute: "frozy-access-token"
#
# For each remote value you can define a set of transformations. For
# instance, you might want to base64-decode a value and feed it into KMS
# decryption. This could be done like this:
#
# auto_registration:
#   access_token:
#     origin: gce_instance_metadata
#     attribute: "frozy-access-token"
#     transform:
#       - base64_decode
#       - type: google_kms_decrypt
#         key: projects/<your-project>/locations/<your-location>/keyRings/<your-key-ring>/cryptoKeys/<your-crypto-key>

frozy:
  # tier field supports remote value syntax
  tier: sandbox
  http_schema: https
  insecure: true
  broker:
    host: custom.frozy.broker
    port: 2200
  registration:
    http_root: http://custom.reg.cloud
    http_path: /reg/v1/register
  api:
    http_root: http://custom.api.cloud
    http_path: /api/v1

join:
  # token field supports remote syntax
  token: JAbdnbtNXsf3CRk9FFP93Ndhjwurwr23RESNMje7crQXM

auto_registration:
  # access_token field supports remote syntax
  access_token: A2vHcq3oahZkwporuJXTJkCPJrHbiCuLWhQcHsDnAmfTf
  # resource field supports remote syntax
  resource: ResourceName
  fail_if_exists: true
  provider:
    host: localhost
    port: 1234
  consumer:
    port: 4321

# Config validation

# Either join or auto_registration sections exist. If there are both or none
# then configuration is considered invalid.

# If auto_registration section exists then either auto_registration.provider
# or auto_registration.consumer section must exists. If there are both or none
# then configuration is considered invalid.
